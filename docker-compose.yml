version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=https://localhost/api
    user: "1000:1000"
    depends_on:
      - backend
    networks:
      - emotionbeats-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app:cached
    env_file:
      - .env
    environment:
      # Override or add environment-specific variables
      - DATABASE_URL=${DATABASE_URL}
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
      - SPOTIFY_REDIRECT_URI=${SPOTIFY_REDIRECT_URI}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_URL=${REDIS_URL}
      - SOCKETIO_REDIS_URL=${SOCKETIO_REDIS_URL}
      - SOCKETIO_CORS_ORIGINS=${SOCKETIO_CORS_ORIGINS}
      - SOCKETIO_PING_TIMEOUT=${SOCKETIO_PING_TIMEOUT}
      - SOCKETIO_PING_INTERVAL=${SOCKETIO_PING_INTERVAL}
      - SOCKETIO_RATE_LIMIT_ENABLED=${SOCKETIO_RATE_LIMIT_ENABLED}
      - SOCKETIO_RATE_LIMIT_REQUESTS=${SOCKETIO_RATE_LIMIT_REQUESTS}
      - SOCKETIO_RATE_LIMIT_WINDOW=${SOCKETIO_RATE_LIMIT_WINDOW}
      - ENVIRONMENT=${ENVIRONMENT}
      - TESTING=${TESTING}
      - PYTHONUNBUFFERED=${PYTHONUNBUFFERED}
      - PYTHONDONTWRITEBYTECODE=${PYTHONDONTWRITEBYTECODE}
      - LOG_LEVEL=${LOG_LEVEL}
      - CSRF_SECRET_KEY=${CSRF_SECRET_KEY}
    user: "1000:1000"
    depends_on:
      - db
      - redis
    networks:
      - emotionbeats-network
    # Add health check for better monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - frontend
      - backend
    networks:
      - emotionbeats-network

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=emotionbeats
    networks:
      - emotionbeats-network
    # Add health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - emotionbeats-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    # Add health check for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  emotionbeats-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: